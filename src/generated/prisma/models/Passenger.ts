
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Passenger` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Passenger
 * 
 */
export type PassengerModel = runtime.Types.Result.DefaultSelection<Prisma.$PassengerPayload>

export type AggregatePassenger = {
  _count: PassengerCountAggregateOutputType | null
  _min: PassengerMinAggregateOutputType | null
  _max: PassengerMaxAggregateOutputType | null
}

export type PassengerMinAggregateOutputType = {
  id: string | null
  name: string | null
  cpf: string | null
  dateOfBirth: Date | null
  gender: $Enums.Gender | null
  address: string | null
  phone: string | null
  prefersNoConversation: boolean | null
}

export type PassengerMaxAggregateOutputType = {
  id: string | null
  name: string | null
  cpf: string | null
  dateOfBirth: Date | null
  gender: $Enums.Gender | null
  address: string | null
  phone: string | null
  prefersNoConversation: boolean | null
}

export type PassengerCountAggregateOutputType = {
  id: number
  name: number
  cpf: number
  dateOfBirth: number
  gender: number
  address: number
  phone: number
  prefersNoConversation: number
  _all: number
}


export type PassengerMinAggregateInputType = {
  id?: true
  name?: true
  cpf?: true
  dateOfBirth?: true
  gender?: true
  address?: true
  phone?: true
  prefersNoConversation?: true
}

export type PassengerMaxAggregateInputType = {
  id?: true
  name?: true
  cpf?: true
  dateOfBirth?: true
  gender?: true
  address?: true
  phone?: true
  prefersNoConversation?: true
}

export type PassengerCountAggregateInputType = {
  id?: true
  name?: true
  cpf?: true
  dateOfBirth?: true
  gender?: true
  address?: true
  phone?: true
  prefersNoConversation?: true
  _all?: true
}

export type PassengerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Passenger to aggregate.
   */
  where?: Prisma.PassengerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passengers to fetch.
   */
  orderBy?: Prisma.PassengerOrderByWithRelationInput | Prisma.PassengerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PassengerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passengers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passengers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Passengers
  **/
  _count?: true | PassengerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PassengerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PassengerMaxAggregateInputType
}

export type GetPassengerAggregateType<T extends PassengerAggregateArgs> = {
      [P in keyof T & keyof AggregatePassenger]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePassenger[P]>
    : Prisma.GetScalarType<T[P], AggregatePassenger[P]>
}




export type PassengerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PassengerWhereInput
  orderBy?: Prisma.PassengerOrderByWithAggregationInput | Prisma.PassengerOrderByWithAggregationInput[]
  by: Prisma.PassengerScalarFieldEnum[] | Prisma.PassengerScalarFieldEnum
  having?: Prisma.PassengerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PassengerCountAggregateInputType | true
  _min?: PassengerMinAggregateInputType
  _max?: PassengerMaxAggregateInputType
}

export type PassengerGroupByOutputType = {
  id: string
  name: string
  cpf: string
  dateOfBirth: Date
  gender: $Enums.Gender
  address: string
  phone: string
  prefersNoConversation: boolean
  _count: PassengerCountAggregateOutputType | null
  _min: PassengerMinAggregateOutputType | null
  _max: PassengerMaxAggregateOutputType | null
}

type GetPassengerGroupByPayload<T extends PassengerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PassengerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PassengerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PassengerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PassengerGroupByOutputType[P]>
      }
    >
  >



export type PassengerWhereInput = {
  AND?: Prisma.PassengerWhereInput | Prisma.PassengerWhereInput[]
  OR?: Prisma.PassengerWhereInput[]
  NOT?: Prisma.PassengerWhereInput | Prisma.PassengerWhereInput[]
  id?: Prisma.StringFilter<"Passenger"> | string
  name?: Prisma.StringFilter<"Passenger"> | string
  cpf?: Prisma.StringFilter<"Passenger"> | string
  dateOfBirth?: Prisma.DateTimeFilter<"Passenger"> | Date | string
  gender?: Prisma.EnumGenderFilter<"Passenger"> | $Enums.Gender
  address?: Prisma.StringFilter<"Passenger"> | string
  phone?: Prisma.StringFilter<"Passenger"> | string
  prefersNoConversation?: Prisma.BoolFilter<"Passenger"> | boolean
}

export type PassengerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  prefersNoConversation?: Prisma.SortOrder
}

export type PassengerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  cpf?: string
  AND?: Prisma.PassengerWhereInput | Prisma.PassengerWhereInput[]
  OR?: Prisma.PassengerWhereInput[]
  NOT?: Prisma.PassengerWhereInput | Prisma.PassengerWhereInput[]
  name?: Prisma.StringFilter<"Passenger"> | string
  dateOfBirth?: Prisma.DateTimeFilter<"Passenger"> | Date | string
  gender?: Prisma.EnumGenderFilter<"Passenger"> | $Enums.Gender
  address?: Prisma.StringFilter<"Passenger"> | string
  phone?: Prisma.StringFilter<"Passenger"> | string
  prefersNoConversation?: Prisma.BoolFilter<"Passenger"> | boolean
}, "id" | "cpf">

export type PassengerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  prefersNoConversation?: Prisma.SortOrder
  _count?: Prisma.PassengerCountOrderByAggregateInput
  _max?: Prisma.PassengerMaxOrderByAggregateInput
  _min?: Prisma.PassengerMinOrderByAggregateInput
}

export type PassengerScalarWhereWithAggregatesInput = {
  AND?: Prisma.PassengerScalarWhereWithAggregatesInput | Prisma.PassengerScalarWhereWithAggregatesInput[]
  OR?: Prisma.PassengerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PassengerScalarWhereWithAggregatesInput | Prisma.PassengerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Passenger"> | string
  name?: Prisma.StringWithAggregatesFilter<"Passenger"> | string
  cpf?: Prisma.StringWithAggregatesFilter<"Passenger"> | string
  dateOfBirth?: Prisma.DateTimeWithAggregatesFilter<"Passenger"> | Date | string
  gender?: Prisma.EnumGenderWithAggregatesFilter<"Passenger"> | $Enums.Gender
  address?: Prisma.StringWithAggregatesFilter<"Passenger"> | string
  phone?: Prisma.StringWithAggregatesFilter<"Passenger"> | string
  prefersNoConversation?: Prisma.BoolWithAggregatesFilter<"Passenger"> | boolean
}

export type PassengerCreateInput = {
  id?: string
  name: string
  cpf: string
  dateOfBirth: Date | string
  gender: $Enums.Gender
  address: string
  phone: string
  prefersNoConversation: boolean
}

export type PassengerUncheckedCreateInput = {
  id?: string
  name: string
  cpf: string
  dateOfBirth: Date | string
  gender: $Enums.Gender
  address: string
  phone: string
  prefersNoConversation: boolean
}

export type PassengerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  cpf?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  prefersNoConversation?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PassengerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  cpf?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  prefersNoConversation?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PassengerCreateManyInput = {
  id?: string
  name: string
  cpf: string
  dateOfBirth: Date | string
  gender: $Enums.Gender
  address: string
  phone: string
  prefersNoConversation: boolean
}

export type PassengerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  cpf?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  prefersNoConversation?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PassengerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  cpf?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  prefersNoConversation?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PassengerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  prefersNoConversation?: Prisma.SortOrder
}

export type PassengerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  prefersNoConversation?: Prisma.SortOrder
}

export type PassengerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  prefersNoConversation?: Prisma.SortOrder
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}



export type PassengerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  cpf?: boolean
  dateOfBirth?: boolean
  gender?: boolean
  address?: boolean
  phone?: boolean
  prefersNoConversation?: boolean
}, ExtArgs["result"]["passenger"]>

export type PassengerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  cpf?: boolean
  dateOfBirth?: boolean
  gender?: boolean
  address?: boolean
  phone?: boolean
  prefersNoConversation?: boolean
}, ExtArgs["result"]["passenger"]>

export type PassengerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  cpf?: boolean
  dateOfBirth?: boolean
  gender?: boolean
  address?: boolean
  phone?: boolean
  prefersNoConversation?: boolean
}, ExtArgs["result"]["passenger"]>

export type PassengerSelectScalar = {
  id?: boolean
  name?: boolean
  cpf?: boolean
  dateOfBirth?: boolean
  gender?: boolean
  address?: boolean
  phone?: boolean
  prefersNoConversation?: boolean
}

export type PassengerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "cpf" | "dateOfBirth" | "gender" | "address" | "phone" | "prefersNoConversation", ExtArgs["result"]["passenger"]>

export type $PassengerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Passenger"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    cpf: string
    dateOfBirth: Date
    gender: $Enums.Gender
    address: string
    phone: string
    prefersNoConversation: boolean
  }, ExtArgs["result"]["passenger"]>
  composites: {}
}

export type PassengerGetPayload<S extends boolean | null | undefined | PassengerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PassengerPayload, S>

export type PassengerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PassengerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PassengerCountAggregateInputType | true
  }

export interface PassengerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Passenger'], meta: { name: 'Passenger' } }
  /**
   * Find zero or one Passenger that matches the filter.
   * @param {PassengerFindUniqueArgs} args - Arguments to find a Passenger
   * @example
   * // Get one Passenger
   * const passenger = await prisma.passenger.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PassengerFindUniqueArgs>(args: Prisma.SelectSubset<T, PassengerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Passenger that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PassengerFindUniqueOrThrowArgs} args - Arguments to find a Passenger
   * @example
   * // Get one Passenger
   * const passenger = await prisma.passenger.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PassengerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PassengerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Passenger that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerFindFirstArgs} args - Arguments to find a Passenger
   * @example
   * // Get one Passenger
   * const passenger = await prisma.passenger.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PassengerFindFirstArgs>(args?: Prisma.SelectSubset<T, PassengerFindFirstArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Passenger that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerFindFirstOrThrowArgs} args - Arguments to find a Passenger
   * @example
   * // Get one Passenger
   * const passenger = await prisma.passenger.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PassengerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PassengerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Passengers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Passengers
   * const passengers = await prisma.passenger.findMany()
   * 
   * // Get first 10 Passengers
   * const passengers = await prisma.passenger.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const passengerWithIdOnly = await prisma.passenger.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PassengerFindManyArgs>(args?: Prisma.SelectSubset<T, PassengerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Passenger.
   * @param {PassengerCreateArgs} args - Arguments to create a Passenger.
   * @example
   * // Create one Passenger
   * const Passenger = await prisma.passenger.create({
   *   data: {
   *     // ... data to create a Passenger
   *   }
   * })
   * 
   */
  create<T extends PassengerCreateArgs>(args: Prisma.SelectSubset<T, PassengerCreateArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Passengers.
   * @param {PassengerCreateManyArgs} args - Arguments to create many Passengers.
   * @example
   * // Create many Passengers
   * const passenger = await prisma.passenger.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PassengerCreateManyArgs>(args?: Prisma.SelectSubset<T, PassengerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Passengers and returns the data saved in the database.
   * @param {PassengerCreateManyAndReturnArgs} args - Arguments to create many Passengers.
   * @example
   * // Create many Passengers
   * const passenger = await prisma.passenger.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Passengers and only return the `id`
   * const passengerWithIdOnly = await prisma.passenger.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PassengerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PassengerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Passenger.
   * @param {PassengerDeleteArgs} args - Arguments to delete one Passenger.
   * @example
   * // Delete one Passenger
   * const Passenger = await prisma.passenger.delete({
   *   where: {
   *     // ... filter to delete one Passenger
   *   }
   * })
   * 
   */
  delete<T extends PassengerDeleteArgs>(args: Prisma.SelectSubset<T, PassengerDeleteArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Passenger.
   * @param {PassengerUpdateArgs} args - Arguments to update one Passenger.
   * @example
   * // Update one Passenger
   * const passenger = await prisma.passenger.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PassengerUpdateArgs>(args: Prisma.SelectSubset<T, PassengerUpdateArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Passengers.
   * @param {PassengerDeleteManyArgs} args - Arguments to filter Passengers to delete.
   * @example
   * // Delete a few Passengers
   * const { count } = await prisma.passenger.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PassengerDeleteManyArgs>(args?: Prisma.SelectSubset<T, PassengerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Passengers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Passengers
   * const passenger = await prisma.passenger.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PassengerUpdateManyArgs>(args: Prisma.SelectSubset<T, PassengerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Passengers and returns the data updated in the database.
   * @param {PassengerUpdateManyAndReturnArgs} args - Arguments to update many Passengers.
   * @example
   * // Update many Passengers
   * const passenger = await prisma.passenger.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Passengers and only return the `id`
   * const passengerWithIdOnly = await prisma.passenger.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PassengerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PassengerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Passenger.
   * @param {PassengerUpsertArgs} args - Arguments to update or create a Passenger.
   * @example
   * // Update or create a Passenger
   * const passenger = await prisma.passenger.upsert({
   *   create: {
   *     // ... data to create a Passenger
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Passenger we want to update
   *   }
   * })
   */
  upsert<T extends PassengerUpsertArgs>(args: Prisma.SelectSubset<T, PassengerUpsertArgs<ExtArgs>>): Prisma.Prisma__PassengerClient<runtime.Types.Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Passengers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerCountArgs} args - Arguments to filter Passengers to count.
   * @example
   * // Count the number of Passengers
   * const count = await prisma.passenger.count({
   *   where: {
   *     // ... the filter for the Passengers we want to count
   *   }
   * })
  **/
  count<T extends PassengerCountArgs>(
    args?: Prisma.Subset<T, PassengerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PassengerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Passenger.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PassengerAggregateArgs>(args: Prisma.Subset<T, PassengerAggregateArgs>): Prisma.PrismaPromise<GetPassengerAggregateType<T>>

  /**
   * Group by Passenger.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PassengerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PassengerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PassengerGroupByArgs['orderBy'] }
      : { orderBy?: PassengerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PassengerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassengerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Passenger model
 */
readonly fields: PassengerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Passenger.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PassengerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Passenger model
 */
export interface PassengerFieldRefs {
  readonly id: Prisma.FieldRef<"Passenger", 'String'>
  readonly name: Prisma.FieldRef<"Passenger", 'String'>
  readonly cpf: Prisma.FieldRef<"Passenger", 'String'>
  readonly dateOfBirth: Prisma.FieldRef<"Passenger", 'DateTime'>
  readonly gender: Prisma.FieldRef<"Passenger", 'Gender'>
  readonly address: Prisma.FieldRef<"Passenger", 'String'>
  readonly phone: Prisma.FieldRef<"Passenger", 'String'>
  readonly prefersNoConversation: Prisma.FieldRef<"Passenger", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Passenger findUnique
 */
export type PassengerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * Filter, which Passenger to fetch.
   */
  where: Prisma.PassengerWhereUniqueInput
}

/**
 * Passenger findUniqueOrThrow
 */
export type PassengerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * Filter, which Passenger to fetch.
   */
  where: Prisma.PassengerWhereUniqueInput
}

/**
 * Passenger findFirst
 */
export type PassengerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * Filter, which Passenger to fetch.
   */
  where?: Prisma.PassengerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passengers to fetch.
   */
  orderBy?: Prisma.PassengerOrderByWithRelationInput | Prisma.PassengerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Passengers.
   */
  cursor?: Prisma.PassengerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passengers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passengers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Passengers.
   */
  distinct?: Prisma.PassengerScalarFieldEnum | Prisma.PassengerScalarFieldEnum[]
}

/**
 * Passenger findFirstOrThrow
 */
export type PassengerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * Filter, which Passenger to fetch.
   */
  where?: Prisma.PassengerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passengers to fetch.
   */
  orderBy?: Prisma.PassengerOrderByWithRelationInput | Prisma.PassengerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Passengers.
   */
  cursor?: Prisma.PassengerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passengers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passengers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Passengers.
   */
  distinct?: Prisma.PassengerScalarFieldEnum | Prisma.PassengerScalarFieldEnum[]
}

/**
 * Passenger findMany
 */
export type PassengerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * Filter, which Passengers to fetch.
   */
  where?: Prisma.PassengerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Passengers to fetch.
   */
  orderBy?: Prisma.PassengerOrderByWithRelationInput | Prisma.PassengerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Passengers.
   */
  cursor?: Prisma.PassengerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Passengers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Passengers.
   */
  skip?: number
  distinct?: Prisma.PassengerScalarFieldEnum | Prisma.PassengerScalarFieldEnum[]
}

/**
 * Passenger create
 */
export type PassengerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * The data needed to create a Passenger.
   */
  data: Prisma.XOR<Prisma.PassengerCreateInput, Prisma.PassengerUncheckedCreateInput>
}

/**
 * Passenger createMany
 */
export type PassengerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Passengers.
   */
  data: Prisma.PassengerCreateManyInput | Prisma.PassengerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Passenger createManyAndReturn
 */
export type PassengerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * The data used to create many Passengers.
   */
  data: Prisma.PassengerCreateManyInput | Prisma.PassengerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Passenger update
 */
export type PassengerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * The data needed to update a Passenger.
   */
  data: Prisma.XOR<Prisma.PassengerUpdateInput, Prisma.PassengerUncheckedUpdateInput>
  /**
   * Choose, which Passenger to update.
   */
  where: Prisma.PassengerWhereUniqueInput
}

/**
 * Passenger updateMany
 */
export type PassengerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Passengers.
   */
  data: Prisma.XOR<Prisma.PassengerUpdateManyMutationInput, Prisma.PassengerUncheckedUpdateManyInput>
  /**
   * Filter which Passengers to update
   */
  where?: Prisma.PassengerWhereInput
  /**
   * Limit how many Passengers to update.
   */
  limit?: number
}

/**
 * Passenger updateManyAndReturn
 */
export type PassengerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * The data used to update Passengers.
   */
  data: Prisma.XOR<Prisma.PassengerUpdateManyMutationInput, Prisma.PassengerUncheckedUpdateManyInput>
  /**
   * Filter which Passengers to update
   */
  where?: Prisma.PassengerWhereInput
  /**
   * Limit how many Passengers to update.
   */
  limit?: number
}

/**
 * Passenger upsert
 */
export type PassengerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * The filter to search for the Passenger to update in case it exists.
   */
  where: Prisma.PassengerWhereUniqueInput
  /**
   * In case the Passenger found by the `where` argument doesn't exist, create a new Passenger with this data.
   */
  create: Prisma.XOR<Prisma.PassengerCreateInput, Prisma.PassengerUncheckedCreateInput>
  /**
   * In case the Passenger was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PassengerUpdateInput, Prisma.PassengerUncheckedUpdateInput>
}

/**
 * Passenger delete
 */
export type PassengerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
  /**
   * Filter which Passenger to delete.
   */
  where: Prisma.PassengerWhereUniqueInput
}

/**
 * Passenger deleteMany
 */
export type PassengerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Passengers to delete
   */
  where?: Prisma.PassengerWhereInput
  /**
   * Limit how many Passengers to delete.
   */
  limit?: number
}

/**
 * Passenger without action
 */
export type PassengerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Passenger
   */
  select?: Prisma.PassengerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Passenger
   */
  omit?: Prisma.PassengerOmit<ExtArgs> | null
}
